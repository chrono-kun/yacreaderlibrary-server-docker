---
# Builds our multi-arch Docker images for p7zip and unarr versions of YACReaderLibraryServer
name: Build and push images
on:
  release:
    types: [published]  
  workflow_dispatch:

env:
  DOCKERHUB_SLUG: xthursdayx/yacreaderlibrary-server-docker
  GHCR_SLUG: ghcr.io/xthursdayx/yacreaderlibrary-server-docker

jobs:
  build-unarr-amd64:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        
      - name: Docker meta
        id: dh-meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ${{ env.DOCKERHUB_SLUG }}
          flavor: latest=false
          tags: |
            type=ref,event=tag

      - name: Docker meta
        id: gh-meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ${{ env.GHCR_SLUG }}
          flavor: latest=false
          tags: |
            type=ref,event=tag

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Dockerhub
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push container image
        uses: docker/build-push-action@v2
        with:
          context: unarr
          file: unarr/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.DOCKERHUB_SLUG }}:unarr-amd64
            ${{ env.DOCKERHUB_SLUG }}:latest-amd64
            ${{ env.GHCR_SLUG }}:unarr-amd64
            ${{ env.GHCR_SLUG }}:latest-amd64
            ${{ steps.dh-meta.outputs.tags }}-amd64
            ${{ steps.gh-meta.outputs.tags }}-amd64
          labels: ${{ steps.dh-meta.outputs.labels }}

  build-unarr-arm64v8:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker meta
        id: dh-meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ${{ env.DOCKERHUB_SLUG }}
          flavor: latest=false
          tags: |
            type=ref,event=tag

      - name: Docker meta
        id: gh-meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ${{ env.GHCR_SLUG }}
          flavor: latest=false
          tags: |
            type=ref,event=tag

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Dockerhub
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push container image
        uses: docker/build-push-action@v2
        with:
          push: true
          context: unarr
          file: unarr/Dockerfile.aarch64
          platforms: linux/arm64/v8
          tags: |
            ${{ env.DOCKERHUB_SLUG }}:unarr-arm64v8
            ${{ env.DOCKERHUB_SLUG }}:latest-arm64v8
            ${{ env.GHCR_SLUG }}:unarr-arm64v8
            ${{ env.GHCR_SLUG }}:latest-arm64v8
            ${{ steps.dh-meta.outputs.tags }}-arm64v8
            ${{ steps.gh-meta.outputs.tags }}-arm64v8
          labels: ${{ steps.dh-meta.outputs.labels }}

  build-unarr-arm32v7:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker meta
        id: dh-meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ${{ env.DOCKERHUB_SLUG }}
          flavor: latest=false
          tags: |
            type=ref,event=tag

      - name: Docker meta
        id: gh-meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ${{ env.GHCR_SLUG }}
          flavor: latest=false
          tags: |
            type=ref,event=tag

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Dockerhub
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push container image
        uses: docker/build-push-action@v2
        with:
          push: true
          context: unarr
          file: unarr/Dockerfile.armhf
          platforms: linux/arm/v7
          tags: |
            ${{ env.DOCKERHUB_SLUG }}:unarr-arm32v7
            ${{ env.DOCKERHUB_SLUG }}:latest-arm32v7
            ${{ env.GHCR_SLUG }}:unarr-arm32v7
            ${{ env.GHCR_SLUG }}:latest-arm32v7
            ${{ steps.dh-meta.outputs.tags }}-arm32v7
            ${{ steps.gh-meta.outputs.tags }}-arm32v7
          labels: ${{ steps.dh-meta.outputs.labels }}

  build-p7zip-amd64:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Dockerhub
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push container image
        uses: docker/build-push-action@v2
        with:
          push: true
          context: p7zip
          file: p7zip/Dockerfile
          platforms: linux/amd64
          tags: |
            ${{ env.DOCKERHUB_SLUG }}:p7zip-amd64
            ${{ env.GHCR_SLUG }}:p7zip-amd64

  build-p7zip-arm64v8:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Dockerhub
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push container image
        uses: docker/build-push-action@v2
        with:
          push: true
          context: p7zip
          file: p7zip/Dockerfile.aarch64
          platforms: linux/arm64/v8
          tags: |
            ${{ env.DOCKERHUB_SLUG }}:p7zip-arm64v8
            ${{ env.GHCR_SLUG }}:p7zip-arm64v8

  build-p7zip-arm32v7:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Dockerhub
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push container image
        uses: docker/build-push-action@v2
        with:
          push: true
          context: p7zip
          file: p7zip/Dockerfile.armhf
          platforms: linux/arm/v7
          tags: |
            ${{ env.DOCKERHUB_SLUG }}:p7zip-arm32v7
            ${{ env.GHCR_SLUG }}:p7zip-arm32v7

  push-manifest:
    needs: [build-unarr-amd64, build-unarr-arm64v8, build-unarr-arm32v7, build-p7zip-amd64, build-p7zip-arm64v8, build-p7zip-arm32v7]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker meta
        id: dh-meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ${{ env.DOCKERHUB_SLUG }}
          flavor: latest=false
          tags: |
            type=ref,event=tag

      - name: Docker meta
        id: gh-meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ${{ env.GHCR_SLUG }}
          flavor: latest=false
          tags: |
            type=ref,event=tag

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
    
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Dockerhub
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifest for multi-arch images @ Docker Hub
        run: |
          docker pull ${{ env.DOCKERHUB_SLUG }}:unarr-amd64
          docker pull ${{ env.DOCKERHUB_SLUG }}:unarr-arm64v8
          docker pull ${{ env.DOCKERHUB_SLUG }}:unarr-arm32v7
          docker pull ${{ env.DOCKERHUB_SLUG }}:latest-amd64
          docker pull ${{ env.DOCKERHUB_SLUG }}:latest-arm64v8
          docker pull ${{ env.DOCKERHUB_SLUG }}:latest-arm32v7
          docker pull ${{ env.DOCKERHUB_SLUG }}:p7zip-amd64
          docker pull ${{ env.DOCKERHUB_SLUG }}:p7zip-arm64v8
          docker pull ${{ env.DOCKERHUB_SLUG }}:p7zip-arm32v7
          docker manifest create ${{ env.DOCKERHUB_SLUG }}:unarr ${{ env.DOCKERHUB_SLUG }}:unarr-amd64 ${{ env.DOCKERHUB_SLUG }}:unarr-arm64v8 ${{ env.DOCKERHUB_SLUG }}:unarr-arm32v7
          docker manifest annotate ${{ env.DOCKERHUB_SLUG }}:unarr ${{ env.DOCKERHUB_SLUG }}:unarr-amd64 --arch amd64
          docker manifest annotate ${{ env.DOCKERHUB_SLUG }}:unarr ${{ env.DOCKERHUB_SLUG }}:unarr-arm64v8 --arch arm64
          docker manifest annotate ${{ env.DOCKERHUB_SLUG }}:unarr ${{ env.DOCKERHUB_SLUG }}:unarr-arm32v7 --arch arm
          docker manifest push ${{ env.DOCKERHUB_SLUG }}:unarr
          docker manifest create ${{ env.DOCKERHUB_SLUG }}:p7zip ${{ env.DOCKERHUB_SLUG }}:p7zip-amd64 ${{ env.DOCKERHUB_SLUG }}:p7zip-arm64v8 ${{ env.DOCKERHUB_SLUG }}:p7zip-arm32v7
          docker manifest annotate ${{ env.DOCKERHUB_SLUG }}:p7zip ${{ env.DOCKERHUB_SLUG }}:p7zip-amd64 --arch amd64
          docker manifest annotate ${{ env.DOCKERHUB_SLUG }}:p7zip ${{ env.DOCKERHUB_SLUG }}:p7zip-arm64v8 --arch arm64
          docker manifest annotate ${{ env.DOCKERHUB_SLUG }}:p7zip ${{ env.DOCKERHUB_SLUG }}:p7zip-arm32v7 --arch arm
          docker manifest push ${{ env.DOCKERHUB_SLUG }}:p7zip
          docker manifest create ${{ env.DOCKERHUB_SLUG }}:latest ${{ env.DOCKERHUB_SLUG }}:latest-amd64 ${{ env.DOCKERHUB_SLUG }}:latest-arm64v8 ${{ env.DOCKERHUB_SLUG }}:latest-arm32v7
          docker manifest annotate ${{ env.DOCKERHUB_SLUG }}:latest ${{ env.DOCKERHUB_SLUG }}:latest-amd64 --arch amd64
          docker manifest annotate ${{ env.DOCKERHUB_SLUG }}:latest ${{ env.DOCKERHUB_SLUG }}:latest-arm64v8 --arch arm64
          docker manifest annotate ${{ env.DOCKERHUB_SLUG }}:latest ${{ env.DOCKERHUB_SLUG }}:latest-arm32v7 --arch arm
          docker manifest push ${{ env.DOCKERHUB_SLUG }}:latest

          docker pull ${{ steps.dh-meta.outputs.tags }}-amd64
          docker pull ${{ steps.dh-meta.outputs.tags }}-arm64v8
          docker pull ${{ steps.dh-meta.outputs.tags }}-arm32v7
          docker manifest create ${{ steps.dh-meta.outputs.tags }} ${{ steps.dh-meta.outputs.tags }}-amd64 ${{ steps.dh-meta.outputs.tags }}-arm64v8 ${{ steps.dh-meta.outputs.tags }}-arm32v7
          docker manifest annotate ${{ steps.dh-meta.outputs.tags }} ${{ steps.dh-meta.outputs.tags }}-amd64 --arch amd64
          docker manifest annotate ${{ steps.dh-meta.outputs.tags }} ${{ steps.dh-meta.outputs.tags }}-arm64v8 --arch arm64
          docker manifest annotate ${{ steps.dh-meta.outputs.tags }} ${{ steps.dh-meta.outputs.tags }}-arm32v7 --arch arm
          docker manifest push ${{ steps.dh-meta.outputs.tags }}
#          docker pull ${{ steps.gh-meta.outputs.tags }}-amd64
#          docker pull ${{ steps.gh-meta.outputs.tags }}-arm64v8
#          docker pull ${{ steps.gh-meta.outputs.tags }}-arm32v7
#          docker manifest create ${{ steps.gh-meta.outputs.tags }} ${{ steps.gh-meta.outputs.tags }}-amd64 ${{ steps.gh-meta.outputs.tags }}-arm64v8 ${{ steps.gh-meta.outputs.tags }}-arm32v7
#          docker manifest annotate ${{ steps.gh-meta.outputs.tags }} ${{ steps.gh-meta.outputs.tags }}-amd64 --arch amd64
#          docker manifest annotate ${{ steps.gh-meta.outputs.tags }} ${{ steps.gh-meta.outputs.tags }}-arm64v8 --arch arm64
#          docker manifest annotate ${{ steps.gh-meta.outputs.tags }} ${{ steps.gh-meta.outputs.tags }}-arm32v7 --arch arm
#          docker manifest push ${{ steps.gh-meta.outputs.tags }} 

      - name: Create manifest for multi-arch images @ GHCR
        run: |
          docker pull ${{ env.GHCR_SLUG }}:unarr-amd64
          docker pull ${{ env.GHCR_SLUG }}:unarr-arm64v8
          docker pull ${{ env.GHCR_SLUG }}:unarr-arm32v7
          docker pull ${{ env.GHCR_SLUG }}:latest-amd64
          docker pull ${{ env.GHCR_SLUG }}:latest-arm64v8
          docker pull ${{ env.GHCR_SLUG }}:latest-arm32v7
          docker pull ${{ env.GHCR_SLUG }}:p7zip-amd64
          docker pull ${{ env.GHCR_SLUG }}:p7zip-arm64v8
          docker pull ${{ env.GHCR_SLUG }}:p7zip-arm32v7
          docker manifest create ${{ env.GHCR_SLUG }}:unarr ${{ env.GHCR_SLUG }}:unarr-amd64 ${{ env.GHCR_SLUG }}:unarr-arm64v8 ${{ env.GHCR_SLUG }}:unarr-arm32v7
          docker manifest annotate ${{ env.GHCR_SLUG }}:unarr ${{ env.GHCR_SLUG }}:unarr-amd64 --arch amd64
          docker manifest annotate ${{ env.GHCR_SLUG }}:unarr ${{ env.GHCR_SLUG }}:unarr-arm64v8 --arch arm64
          docker manifest annotate ${{ env.GHCR_SLUG }}:unarr ${{ env.GHCR_SLUG }}:unarr-arm32v7 --arch arm
          docker manifest push ${{ env.GHCR_SLUG }}:unarr
          docker manifest create ${{ env.GHCR_SLUG }}:p7zip ${{ env.GHCR_SLUG }}:p7zip-amd64 ${{ env.GHCR_SLUG }}:p7zip-arm64v8 ${{ env.GHCR_SLUG }}:p7zip-arm32v7
          docker manifest annotate ${{ env.GHCR_SLUG }}:p7zip ${{ env.GHCR_SLUG }}:p7zip-amd64 --arch amd64
          docker manifest annotate ${{ env.GHCR_SLUG }}:p7zip ${{ env.GHCR_SLUG }}:p7zip-arm64v8 --arch arm64
          docker manifest annotate ${{ env.GHCR_SLUG }}:p7zip ${{ env.GHCR_SLUG }}:p7zip-arm32v7 --arch arm
          docker manifest push ${{ env.GHCR_SLUG }}:p7zip
          docker manifest create ${{ env.GHCR_SLUG }}:latest ${{ env.GHCR_SLUG }}:latest-amd64 ${{ env.GHCR_SLUG }}:latest-arm64v8 ${{ env.GHCR_SLUG }}:latest-arm32v7
          docker manifest annotate ${{ env.GHCR_SLUG }}:latest ${{ env.GHCR_SLUG }}:latest-amd64 --arch amd64
          docker manifest annotate ${{ env.GHCR_SLUG }}:latest ${{ env.GHCR_SLUG }}:latest-arm64v8 --arch arm64
          docker manifest annotate ${{ env.GHCR_SLUG }}:latest ${{ env.GHCR_SLUG }}:latest-arm32v7 --arch arm
          docker manifest push ${{ env.GHCR_SLUG }}:latest
